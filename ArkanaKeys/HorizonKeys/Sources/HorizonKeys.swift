// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import HorizonKeysInterfaces

public enum HorizonKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x35, 0xc0, 0x56, 0x5a, 0xc, 0x20, 0xf, 0x1b, 0x77, 0x37, 0xc9, 0xc3, 0x85, 0xc4, 0x3d, 0xb2, 0x73, 0x91, 0xea, 0x29, 0xa2, 0xc3, 0x41, 0xda, 0x13, 0xb6, 0xd3, 0xdc, 0xc8, 0xf5, 0x29, 0x6c, 0x89, 0x15, 0x25, 0x26, 0xca, 0x1b, 0xb1, 0xf8, 0x4, 0x7, 0x54, 0xc5, 0x40, 0x20, 0xfa, 0xd2, 0x41, 0x10, 0xf0, 0x1, 0xb7, 0x41, 0xe8, 0x51, 0x95, 0x6c, 0xbd, 0x75, 0xb, 0x50, 0xec, 0x77
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension HorizonKeys {
    struct Global: HorizonKeysGlobalProtocol {
        public init() {}
    }
}

public extension HorizonKeys {
    struct Debug: HorizonKeysEnvironmentProtocol {
        public init() {}

        @inline(__always)
        public let privateKey: String = {
            let encoded: [UInt8] = [
                0x4, 0xf8, 0x6e, 0x3c, 0x35, 0x41, 0x3a, 0x7a, 0x16, 0, 0xff, 0xfb, 0xb1, 0xf2, 0x59, 0x8b, 0x43, 0xa6, 0x89, 0x1d, 0x93, 0xa0, 0x23, 0xbf, 0x72, 0x80, 0xe6, 0xec, 0xfe, 0x90, 0x1d, 0xf, 0xea, 0x21, 0x10, 0x13, 0xf8, 0x22, 0x82, 0x9e
            ]
            return HorizonKeys.decode(encoded: encoded, cipher: HorizonKeys.salt)
        }()

        @inline(__always)
        public let publicKey: String = {
            let encoded: [UInt8] = [
                0x51, 0xf5, 0x61, 0x6f, 0x6f, 0x12, 0x39, 0x7f, 0x42, 0x54, 0xfe, 0xf7, 0xb3, 0xa2, 0xb, 0x80, 0x40, 0xa4, 0xdb, 0x11, 0xc7, 0xf4, 0x74, 0xe9, 0x2a, 0x84, 0xe2, 0xbd, 0xab, 0xcd, 0x1d, 0x5b
            ]
            return HorizonKeys.decode(encoded: encoded, cipher: HorizonKeys.salt)
        }()
    }
}

public extension HorizonKeys {
    struct Release: HorizonKeysEnvironmentProtocol {
        public init() {}

        @inline(__always)
        public let privateKey: String = {
            let encoded: [UInt8] = [
                0x51, 0xf5, 0x61, 0x6f, 0x6f, 0x12, 0x39, 0x7f, 0x42, 0x54, 0xfe, 0xf7, 0xb3, 0xa2, 0xb, 0x80, 0x40, 0xa4, 0xdb, 0x11, 0xc7, 0xf4, 0x74, 0xe9, 0x2a, 0x84, 0xe2, 0xbd, 0xab, 0xcd, 0x1d, 0x5b
            ]
            return HorizonKeys.decode(encoded: encoded, cipher: HorizonKeys.salt)
        }()

        @inline(__always)
        public let publicKey: String = {
            let encoded: [UInt8] = [
                0x4, 0xf8, 0x6e, 0x3c, 0x35, 0x41, 0x3a, 0x7a, 0x16, 0, 0xff, 0xfb, 0xb1, 0xf2, 0x59, 0x8b, 0x43, 0xa6, 0x89, 0x1d, 0x93, 0xa0, 0x23, 0xbf, 0x72, 0x80, 0xe6, 0xec, 0xfe, 0x90, 0x1d, 0xf, 0xea, 0x21, 0x10, 0x13, 0xf8, 0x22, 0x82, 0x9e
            ]
            return HorizonKeys.decode(encoded: encoded, cipher: HorizonKeys.salt)
        }()
    }
}
