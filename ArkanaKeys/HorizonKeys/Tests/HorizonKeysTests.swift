// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import HorizonKeysInterfaces
import XCTest
@testable import HorizonKeys

final class HorizonKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: HorizonKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x35, 0xc0, 0x56, 0x5a, 0xc, 0x20, 0xf, 0x1b, 0x77, 0x37, 0xc9, 0xc3, 0x85, 0xc4, 0x3d, 0xb2, 0x73, 0x91, 0xea, 0x29, 0xa2, 0xc3, 0x41, 0xda, 0x13, 0xb6, 0xd3, 0xdc, 0xc8, 0xf5, 0x29, 0x6c, 0x89, 0x15, 0x25, 0x26, 0xca, 0x1b, 0xb1, 0xf8, 0x4, 0x7, 0x54, 0xc5, 0x40, 0x20, 0xfa, 0xd2, 0x41, 0x10, 0xf0, 0x1, 0xb7, 0x41, 0xe8, 0x51, 0x95, 0x6c, 0xbd, 0x75, 0xb, 0x50, 0xec, 0x77
        ]
        globalSecrets = HorizonKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x51, 0xf7, 0x32, 0x39, 0x6a, 0x11, 0x6e, 0x29, 0x11, 0x52, 0xfe, 0xa5, 0xbd, 0xfd, 0x5c, 0x8a, 0x42, 0xa3, 0xd2, 0x1f, 0xc1, 0xa6, 0x71, 0xe8, 0x21, 0xd0, 0xb6, 0xbf, 0xa9, 0xc1, 0x1d, 0xa, 0xea, 0x73, 0x1c, 0x17, 0xfe, 0x7d, 0x88, 0xc9, 0x3c, 0x33, 0x66, 0xf2, 0x22, 0x46, 0xc8, 0xe5, 0x70, 0x26, 0xc1, 0x34, 0x81, 0x24, 0x89, 0x62, 0xa5, 0x54, 0x8d, 0x17, 0x3f, 0x64, 0xde, 0x43, 0x57, 0xa3, 0x37, 0x6d, 0x39, 0x16, 0x3f, 0x2e, 0x47, 0x52, 0xaf, 0xf0, 0xb3, 0xa5, 0x59, 0x82, 0x15, 0xf5, 0x88, 0x18, 0x91, 0xf2, 0x76, 0xbe, 0x2a, 0x85, 0xb1, 0xeb, 0xff, 0xcd, 0x19, 0xd, 0xb8, 0x24, 0x10, 0x44, 0xff, 0x2f, 0x80, 0xcc, 0x67, 0x36, 0x66, 0xf6, 0x77, 0x41, 0xc8, 0xb6, 0x78, 0x71, 0x96, 0x64, 0xd4, 0x72, 0xdd, 0x30, 0xf4, 0xe, 0x88, 0x45, 0x3f, 0x61, 0xd4, 0x42
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "d7dcf1a2fe7f89a81286ce022feca44fcf914f918427bf2716156ea3080b4424bca756050ef36ad0fdb1317d93b7780a115b5414c1237a2d9afec35aab504185")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x5f, 0x88, 0x18, 0x62, 0x38, 0x50, 0x42, 0x29, 0x2e, 0x5c, 0xab, 0xf0, 0xe0, 0xfc, 0x6f, 0xea, 0x29, 0xd5, 0xa3, 0x4b, 0xed, 0xbb, 0x30, 0xb8, 0x22, 0xf4, 0xb1, 0x88, 0xf0, 0xa4, 0x18, 0x29, 0xfa, 0x27, 0x61, 0x63, 0x8c, 0x70, 0x89, 0x8c, 0x5d, 0x45, 0x13, 0xa2, 0xd, 0x70, 0xab, 0xa4, 0x77, 0x41, 0xb1, 0x33, 0xf5, 0x36, 0xaf, 0x13, 0xf6, 0x1a, 0xef, 0x5, 0x38, 0x69, 0xa2, 0x42, 0x56, 0x8a, 0xf, 0xa, 0x46, 0x7a, 0x60, 0x2d, 0x6, 0x52, 0xfa, 0xa0, 0xd1, 0xb1, 0x7b, 0xc5, 0x40, 0xd2, 0x98, 0x6b, 0xd7, 0xb4, 0x7c, 0xe7
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "jHN84pM2Ykb3e8RXZDIbOxqb1BbT8Q1Es2DEFk8tYBGgMPQv6QA2BwGBcvRp39N5cJYPJZo6qe3cTuFw3CrBuw==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x4, 0xa1, 0x66, 0x6a, 0x68, 0x13, 0x6b, 0x22, 0x5a, 0x51, 0xfb, 0xf5, 0xe6, 0xe9, 0x9, 0x80, 0x11, 0xa3, 0xc7, 0x48, 0x92, 0xf6, 0x27, 0xf7, 0x70, 0x84, 0xe6, 0xb9, 0xaa, 0x91, 0x4a, 0x58, 0xb0, 0x71, 0x40, 0x45
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "1a00d3d9-f26c-42b2-a05f-c25ebdc49dec")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x41, 0xb2, 0x23, 0x3f
        ]
        XCTAssertTrue(HorizonKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x53, 0xa1, 0x3a, 0x29, 0x69
        ]
        XCTAssertFalse(HorizonKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x1, 0xf2
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x5, 0xf0, 0x66, 0x6b
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0xc, 0xf2, 0x64, 0x69, 0x3f, 0x17, 0x3d, 0x2b, 0x44, 0x1, 0xf1, 0xf6, 0xb1, 0xf3, 0xa, 0x87, 0x4b, 0xa1, 0xdd, 0x10, 0x90, 0xf1, 0x72, 0xe9, 0x24, 0x84, 0xe3, 0xef, 0xfe, 0xcd, 0x1c, 0x58, 0xbe, 0x22, 0x10, 0x1e, 0xfa, 0x2c
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x18, 0xf4, 0x64
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x6, 0xee, 0x67, 0x6e
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x47, 0xa5, 0x37, 0x36, 0x53, 0x4, 0x63, 0x72, 0x1a, 0x68, 0xba, 0xab, 0xe4, 0xa0, 0x44
        ]
        XCTAssertEqual(HorizonKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
